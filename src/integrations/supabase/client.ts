
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from 'sonner';

const SUPABASE_URL = "https://svrsfzpkqleyzfllmkcd.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InN2cnNmenBrcWxleXpmbGxta2NkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY0MzE3MzcsImV4cCI6MjA2MjAwNzczN30.KhbPDaYJqameZXw-NqOl9TQvTBXB7NpkveY92v_gHPI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storage: localStorage
  }
});

/**
 * Vérifie si une table existe et si l'utilisateur a les droits d'accès
 * Retourne true si la table existe et est accessible, false sinon
 */
export async function tableExists(tableName: string): Promise<boolean> {
  try {
    console.log(`Vérification de l'existence et de l'accès à la table '${tableName}'...`);
    const { error } = await supabase
      .from(tableName as any)
      .select('count(*)', { count: 'exact', head: true });
    
    if (error) {
      // Le code 42P01 est l'erreur PostgreSQL "relation does not exist"
      if (error.code === '42P01') {
        console.error(`La table '${tableName}' n'existe pas dans la base de données.`);
        return false;
      }
      
      // Le code PGRST301 indique une erreur d'autorisation
      if (error.code === 'PGRST301') {
        console.error(`Problème d'autorisation pour accéder à la table '${tableName}'.`);
        return false;
      }
      
      console.error(`Erreur lors de la vérification de la table ${tableName}:`, error);
      return false;
    }
    
    console.log(`Table '${tableName}' existe et est accessible.`);
    return true;
  } catch (err) {
    console.error(`Exception lors de la vérification de la table ${tableName}:`, err);
    return false;
  }
}

/**
 * Vérifie l'existence et l'accès à la table companies, essentielle pour l'application
 * Retourne { exists, message } indiquant si la table existe et un message explicatif
 */
export async function verifyCompaniesTable(): Promise<{ exists: boolean; message: string | null }> {
  try {
    // Vérifier d'abord l'authentification
    const isUserAuth = await isAuthenticated();
    if (!isUserAuth) {
      return { 
        exists: false, 
        message: "Vous devez être connecté pour accéder aux données des entreprises." 
      };
    }
    
    const { data: session } = await supabase.auth.getSession();
    const userId = session?.session?.user.id;
    
    // Vérifier si la table companies existe
    const companiesExist = await tableExists('companies');
    if (!companiesExist) {
      return { 
        exists: false, 
        message: "La table des entreprises n'existe pas ou n'est pas accessible." 
      };
    }
    
    // Vérifier si l'utilisateur a au moins une entreprise associée
    const { data: companies, error: companyError } = await supabase
      .from('companies')
      .select('id, company_name')
      .eq('user_id', userId);
      
    if (companyError) {
      console.error("Erreur lors de la recherche d'entreprises:", companyError);
      return { 
        exists: true, 
        message: "Impossible de récupérer vos entreprises. Veuillez réessayer." 
      };
    }
    
    if (!companies || companies.length === 0) {
      return { 
        exists: true, 
        message: "Aucune entreprise associée à votre compte. Veuillez créer une entreprise d'abord." 
      };
    }
    
    return { exists: true, message: null };
  } catch (err) {
    console.error("Erreur lors de la vérification de la table companies:", err);
    return { 
      exists: false, 
      message: "Une erreur est survenue lors de l'accès aux données des entreprises." 
    };
  }
}

/**
 * Vérifie si l'utilisateur est authentifié
 * @returns {Promise<boolean>} true si l'utilisateur est authentifié
 */
export async function isAuthenticated(): Promise<boolean> {
  try {
    const { data: { session } } = await supabase.auth.getSession();
    return !!session;
  } catch (error) {
    console.error("Erreur lors de la vérification de l'authentification:", error);
    return false;
  }
}

/**
 * Fonction de gestion d'erreur pour les requêtes Supabase
 * Affiche des messages d'erreur appropriés et les enregistre dans la console
 */
export function handleSupabaseError(error: any, context: string = "opération"): void {
  if (!error) return;

  console.error(`Erreur Supabase (${context}):`, error);
  
  if (error.code === '42P01') {
    toast.error(`Table introuvable. Veuillez contacter l'administrateur.`);
  } else if (error.code === 'PGRST301') {
    toast.error(`Erreur d'autorisation. Veuillez vous reconnecter.`);
  } else if (error.code === '23505') {
    toast.error(`Un enregistrement avec ces données existe déjà.`);
  } else {
    toast.error(`Une erreur est survenue lors de cette ${context}.`);
  }
}
