
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from 'sonner';

// Utiliser explicitement les bonnes URL et clé
const SUPABASE_URL = "https://svrsfzpkqleyzfllmkcd.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InN2cnNmenBrcWxleXpmbGxta2NkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY0MzE3MzcsImV4cCI6MjA2MjAwNzczN30.KhbPDaYJqameZXw-NqOl9TQvTBXB7NpkveY92v_gHPI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storage: localStorage,
    detectSessionInUrl: true,
    flowType: 'pkce'
  },
  global: {
    headers: {
      'x-client-info': 'blumfo-webapp'
    }
  },
  realtime: {
    timeout: 30000
  }
});

// Fonction utilitaire pour vérifier la connexion à Supabase
export const checkSupabaseConnection = async () => {
  try {
    console.log('Tentative de connexion à Supabase...');
    const startTime = performance.now();
    
    // Essayer une requête simple pour vérifier la connexion
    const { data, error } = await supabase.from('profiles').select('count').limit(1);
    
    const endTime = performance.now();
    const responseTime = Math.round(endTime - startTime);
    
    if (error) {
      console.error(`Erreur de connexion Supabase (${responseTime}ms):`, error);
      
      // Format de l'erreur plus détaillé pour le débogage
      if (error.code) {
        console.error(`Code: ${error.code}, Message: ${error.message}`);
        
        if (error.code === '42P01') {
          return { success: false, error, message: 'La table "profiles" n\'existe pas dans la base de données', statusCode: 404 };
        }
      }
      
      return { success: false, error, message: 'Erreur de connexion à la base de données', statusCode: 500 };
    }
    
    console.log(`Connexion Supabase réussie (${responseTime}ms)`);
    return { success: true, responseTime };
  } catch (err: any) {
    console.error('Exception lors de la connexion Supabase:', err);
    
    // Traitement plus détaillé des erreurs réseau
    const errorMessage = err.message || 'Erreur inconnue lors de la connexion à Supabase';
    const isNetworkError = errorMessage.includes('fetch failed') || 
                           errorMessage.includes('network') || 
                           errorMessage.includes('ECONNREFUSED');
    
    if (isNetworkError) {
      return { success: false, error: err, message: 'Impossible de se connecter au serveur. Vérifiez votre connexion internet.', statusCode: 0 };
    }
    
    return { success: false, error: err, message: errorMessage, statusCode: 500 };
  }
};

// Fonction pour tester l'authentification
export const checkAuthConnection = async () => {
  try {
    const { data, error } = await supabase.auth.getSession();
    
    if (error) {
      console.error('Erreur lors de la vérification de la session:', error);
      return { success: false, error, message: 'Erreur d\'authentification' };
    }
    
    return { 
      success: true, 
      session: data.session,
      isAuthenticated: !!data.session 
    };
  } catch (err) {
    console.error('Exception lors de la vérification de l\'authentification:', err);
    return { success: false, error: err, message: 'Exception lors de la vérification de l\'authentification' };
  }
};

// Fonction utilitaire pour gérer l'expiration des sessions
export const setupAuthExpirationHandler = () => {
  supabase.auth.onAuthStateChange((event, session) => {
    if (event === 'TOKEN_REFRESHED') {
      console.log('Token rafraîchi avec succès');
    }
    
    if (event === 'SIGNED_OUT') {
      console.log('Déconnexion détectée');
      
      // Informer l'utilisateur si nécessaire
      if (document.visibilityState === 'visible') {
        toast.info('Vous avez été déconnecté');
      }
      
      // Nettoyer le stockage local
      localStorage.removeItem('supabase.auth.token');
    }
  });
};
